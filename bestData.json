[
  {
    "question": "Develop a decentralized exchange (DEX) contract with the following features: support for multiple trading pairs, dynamic fees based on the trading volume, order book management with price updates, and a system for allowing users to cancel or replace their orders. Additionally, the contract should have a rewards system that rewards traders for their transactions and maintains a leaderboard of the top traders. Implement the contract in Solidity, and include tests to demonstrate its functionality."
  },
  {
    "question": "Implement a permissioned token with dynamic supply management, allowing the owner to mint and burn tokens at will, with secondary administrators having limited access to minting and burning, and common users able to buy and sell tokens through a front-end interface, while incorporating security features such as reentrancy protection and event logging for auditing purposes."
  },
  {
    "question": "Implement a multisig wallet with a total of 5 owners. The contract should allow for a minimum of 3 owners to approve a transaction for it to be executed, while also enforcing a 24-hour cooldown period for the same transaction ID. The multisig wallet should also keep track of all transactions and their corresponding approval counts, and be able to withdraw funds from the contract for each owner upon their request. Each owner should also have a unique private key for their signature verification."
  },
  {
    "question": "Design and implement a decentralized exchange (DEX) with a yield farming mechanism where users can stake their ERC-20 tokens to earn a share of the trading fees and liquidity provision rewards. The DEX should support both stable and unstable pairs, with a mechanism for users to provide liquidity to the pairs. Additionally, the yield farming contract should have a vesting period of 6 months for the liquidity provision rewards and a linear vesting for the trading fee shares over 2 years with monthly releases."
  },
  {
    "question": "Implement a decentralized prediction market platform where users can create, bet on, and settle predictions. The platform should support a wide range of prediction types, including binary outcomes (e.g., yes/no, win/lose), continuous outcomes (e.g., stock prices, election results), and categorical outcomes (e.g., sports outcomes). Users should be able to deposit funds into their accounts, create new predictions, and place bets on existing predictions. The platform should automatically settle predictions based on their resolution and distribute rewards to users who made correct predictions. The contract should also track and display real-time betting odds and liquidity. Additionally, implement a premium feature for high-stakes betting, where users can create 'premium predictions' that have higher rewards and stricter settlement conditions. Implement a self-executing governance mechanism that allows users to vote on proposals to add new prediction types, adjust fees, or modify existing prediction logic. The contract should be fully upgradeable, allowing for seamless protocol upgrades and bug fixes."
  },
  {
    "question": "Design a multi-asset yield farm contract that supports staking, liquidity provision, and redemption of rewards. The contract should allow users to stake any combination of three ERC20 tokens (tokenA, tokenB, and tokenC), provide liquidity for these tokens, and redeem their rewards in one of the three supported tokens. The yield farm should have a performance fee of 10% for the liquidity provider, a 3% creation fee, and a 1% redemption fee. The contract should also have a mechanism to reinvest user rewards into the yield farm to amplify returns. The user should be able to view their rewards, redeem their rewards, and adjust their stake amount at any time. The contract should be auditable and transparent, with clear records of all transactions and rewards."
  },
  {
    "question": "Create a DeFi lending contract that supports multiple collateral types (e.g., ETH, ERC-20 tokens) and dynamic interest rates based on loan-to-value ratios, market volatility, and interest rate floors. The contract should also implement over-collateralization, liquidation fees, and automated repayment mechanisms. Assume you are working within the Compound protocol ecosystem and you must ensure the contract's functionality aligns with the protocol's standards and requirements."
  },
  {
    "question": "Design a decentralized escrow contract for a charity organization where donors can pledge tokens for a specified cause, and the escrow contract releases the pledged tokens to the cause upon a successful vote by a panel of moderators. The moderators are incentivized with a bonus of 5% of the pledged tokens for every successful vote. If the vote fails, the pledged tokens are refunded to the donors. The contract should also track the donation history and provide a leaderboard for the top contributors. The moderators should be appointed and removed by the charity's administrators through a separate governance contract."
  },
  {
    "question": "Design a decentralized prediction market contract with the following features: Allow users to create and participate in events with various outcomes (e.g., binary events like 'Will the price of Ethereum be above $1000 in the next 6 months?'). Implement a system to ensure the correct calculation of outcome odds, with the ability to update these odds in real-time. The contract should also handle the settlement of prediction market outcomes, awarding winnings to the participants who correctly predicted the outcome. You should take into account the user's balance, prediction, and the actual event outcome to compute the settlement. Moreover, the contract must prevent frontrunning attacks by implementing a delay between the event conclusion and the settlement, giving users time to withdraw their funds if necessary. Finally, design the smart contract in a way that it can scale to handle a large number of events and participants, ensuring performance and gas efficiency."
  },
  {
    "question": "Create a decentralized prediction market contract, allowing users to create, bet on, and resolve events. The contract should support multiple event types (e.g., sports, politics, and entertainment), each with its own event status (open, resolved, or canceled). Implement a reputation system where users with high reputation scores are incentivized to create high-stakes events, and their reputation scores increase accordingly. The contract should also have a mechanism to handle event resolution, such as calculating the correct odds, determining the winner(s), and distributing the winnings among participants. Consider the following requirements and constraints: support for multiple cryptocurrencies, event creation and management, user reputation tracking, and security against potential attacks."
  },
  {
    "question": "Design a yield farming contract with dynamic interest rates that adjust based on the available liquidity in the contract. The interest rate should increase as the liquidity increases, but should never exceed a maximum interest rate of 50%. Additionally, the contract should implement a mechanism for users to lock in their interest rate for a fixed period of time, allowing them to earn a guaranteed return on their investment. The contract should also include a 'slippage protection' feature, where if the interest rate increases significantly, users who have locked in their interest rate will be protected from the new, higher interest rate."
  },
  {
    "question": "Implement a multi-asset voting system where a collection of NFTs represent votes for different asset management strategies. The system should allow voters to stake their NFTs, with the staked NFT's voting power weighted by its rarity, and allow asset managers to propose new strategies, which are then put to a vote. If a strategy receives a simple majority of votes, it is implemented, and the asset managers involved are rewarded with a percentage of the assets under management. The system should also include a treasury to store a portion of the assets under management, and a proposal voting mechanism that takes into account the voting power of the staked NFTs when tallying votes. The contract should also enforce a cooldown period of 30 days between consecutive proposals from the same asset manager, and penalize asset managers who fail to implement a strategy they proposed with a significant portion of their assets under management."
  },
  {
    "question": "Implement a decentralized prediction market where users can create and participate in events with specific outcomes (e.g., election results, sports games, or stock prices). The contract should allow users to stake tokens on the event outcomes, and the user with the most accurate prediction at the end of the event period should receive a reward. Additionally, the contract should have a mechanism to incentivize accurate predictions by allocating a portion of the total staked tokens to the most accurate predictors. Implement a system to prevent frontrunning and manipulation of the prediction market by introducing a settlement period after the event conclusion, during which no new stakes can be placed. Assume the contract has the following variables: eventStatus (enum: active, settled), stakePeriod (uint256), settlementPeriod (uint256), and stakeThreshold (uint256). The contract should also handle the following scenarios: a) Event is still active, stakes can be placed but cannot be withdrawn; b) Event has concluded but not yet settled, stakes can be withdrawn but no new stakes can be placed; c) Event has concluded and is settled, stakes can be withdrawn and rewards can be claimed."
  },
  {
    "question": "Create a complex vault contract that allows users to deposit and withdraw multiple ERC-20 tokens, while earning interest based on a variable APY. The vault should have a multi-step unlock mechanism: - The first 20% of deposited tokens can be withdrawn immediately. - The next 30% of deposited tokens can be withdrawn after a 1-month lockup. - The remaining 50% of deposited tokens can be withdrawn after a 3-month lockup. The interest APY should be dynamic and adjusted based on the total deposited token value and the number of tokens withdrawn. Additionally, the vault should have a mechanism for LP (liquidity provider) rewards, where 5% of the interest earned is distributed to the LPs for providing liquidity to the contract. You should implement this contract using Solidity and provide a comprehensive explanation of the code."
  },
  {
    "question": "Create a decentralized prediction market smart contract that allows users to predict the outcome of future events. The contract should handle multiple prediction markets, each with its own set of events, outcomes, and associated tokens. The contract should also enable users to place predictions, deposit tokens, and withdraw winnings. The contract should implement the following features: (1) Correctly determine the outcome of an event based on the cumulative prediction weights, (2) Prevent users from gaming the system by predicting a large number of events and claiming winnings, (3) Handle a large number of prediction markets with multiple events, and (4) Provide a mechanism for updating the prediction market weights and outcomes after the event has occurred. The contract should be secure, scalable, and maintainable. You are required to provide a well-documented, modular, and testable Solidity smart contract that meets the above requirements."
  },
  {
    "question": "Design a decentralized launchpad contract with features for fundraising, token listing, and a dynamic pricing mechanism to incentivize early investors. The contract should support multiple token standards (ERC-20 and ERC-721), dynamic funding caps based on the type of token being listed, and a secondary market for early investors to buy and sell listed tokens. Additionally, implement a vesting mechanism for early investors and a system to track the performance of listed tokens over time, providing transparent and reliable data to investors. Provide a clear and concise implementation guide for your solution."
  },
  {
    "question": "Design a high-stakes, permissionless prediction market contract where users can place bids on the outcome of future events. The contract should feature the following components: (1) a robust event library where users can register events and propose outcomes, (2) a user wallet system where users can deposit and manage their balances, (3) a bidding system where users can place bids on the outcome of events, and (4) a settlement mechanism where the contract resolves the outcome of events and distributes winnings to participants. The contract should also include anti-gamification measures to prevent users from manipulating the outcome of events. Consider the following requirements: (a) the contract should be deployable on a network with a low gas cost, (b) the contract should be able to handle a large number of events and user wallets, (c) the contract should be able to handle a large number of bids and settlements, and (d) the contract should be secure and auditable. Implement the contract using Solidity, considering the above requirements, and provide a comprehensive explanation of your design decisions and trade-offs."
  },
  {
    "question": "Design a decentralized prediction market smart contract where users can place bets on the outcome of future events, with the following features: (1) Users can create and participate in prediction markets for various events, such as sports games, election results, or stock prices. (2) Each event has a specific start and end date, and participants can place bets in the form of ERC-20 tokens. (3) A separate, independent 'oracle' smart contract is responsible for determining the actual outcome of each event, and this oracle will trigger the payment of winnings to the participants who correctly predicted the outcome. (4) To prevent frontrunning and ensure the integrity of the oracle, a delayed vesting mechanism will be implemented, where the oracle's outcome is only revealed and the winnings are paid out after a fixed period of time has elapsed. Implement the prediction market smart contract, ensuring that it accurately reflects these features and incorporates best practices for security and usability."
  },
  {
    "question": "Create a decentralized crowdfunding contract that allows users to create and back fundraising campaigns. Implement a tiered sponsorship system where users can sponsor a campaign with a specified amount of tokens and receive a higher reward rate based on their sponsorship level. The contract should also have a token lockup mechanism to prevent early withdrawal of funds, with a gradual release of locked tokens based on the campaign's progress. The campaign creator should be able to claim the funds after the campaign's end date, but only if a minimum target amount has been reached. The contract should also allow for the cancellation of a campaign if the minimum target amount has not been reached. Implement the contract in Solidity, and provide a comprehensive test suite to ensure its functionality."
  },
  {
    "question": "Create a permissioned access control smart contract that allows administrators to grant specific roles to users, while users with certain roles can perform specific actions such as adding new administrators, transferring funds to a multisig wallet, and requesting transfers from a multisig wallet. Roles should be hierarchical, with higher roles having more privileges, and users can have multiple roles. Include the following features: (1) User and role management, (2) Administrator actions such as adding new administrators, transferring funds, and requesting transfers, (3) Access control logic to restrict user actions based on their roles, and (4) Event emission to track significant events such as role changes, new administrator additions, and transfers. Implement the contract in Solidity, using the OpenZeppelin's AccessControl contract as a reference."
  },
  {
    "question": "Create a Solidity smart contract that enables users to create and manage multiple NFT galleries, each with its own unique URL and metadata. The contract should allow users to upload NFTs to the gallery, set a start and end date for the gallery, and designate a specific user as the gallery curator. The curator should have the ability to add, remove, and update NFTs within the gallery, while other users can only view the NFTs. Additionally, the contract should keep track of the total number of NFTs and the total value of the NFTs within each gallery. The contract should also include a system of 'likes' for NFTs, where users can like an NFT and their 'like' is recorded on the blockchain. The contract should then reward the curator of the gallery with a percentage of the total 'likes' earned by NFTs within the gallery, based on the curator's stake in the gallery. You must utilize a multi-map data structure to store the NFTs and their corresponding metadata within each gallery, and a fixed-point arithmetic library to handle the 'likes' and rewards calculations. Provide a detailed specification of the contract's functionality, including all relevant functions, events, and variables."
  },
  {
    "question": "Create a decentralized prediction market smart contract where users can create and participate in predictions on the outcome of various events, such as sports games, elections, or market trends. The contract should support the following features: (1) event registration, (2) prediction creation, (3) token-based betting, (4) settlement of predictions based on event outcomes, and (5) reward distribution to prediction creators and participants. The contract should also have the following requirements: (1) implement a token economic model that incentivizes accurate predictions, (2) handle multiple event types and prediction types, and (3) handle edge cases such as event cancellations or predictions that do not settle. Implement the contract in Solidity, using the ERC-20 standard for the prediction market token. Assume that there is an existing ERC-20 token available for use in the contract."
  },
  {
    "question": "Design a tokenized voting system where voters can cast weighted votes using a specific token, and the voting power of each token holder is calculated based on their total token balance and the total supply of the voting token. The voting contract should have the following features: voters can cast votes for different proposals, each proposal has a unique identifier, the voting power of each token holder is calculated at the start of each voting period, and the contract can only be used by voters who have a minimum balance of the voting token in their wallet. The contract should also have a method to add a new proposal, and a method to cast a vote for a specific proposal. Additionally, the contract should allow for the addition of new voting periods, and the calculation of the total voting power for each token holder should be updated accordingly. The voting power calculation should be based on the token holder's total balance and the total supply of the voting token, and should be updated every time a vote is cast or a new proposal is added."
  },
  {
    "question": "Design a smart contract that allows users to create and manage ' prediction pools' where users can bet on the outcome of a single event (e.g., the outcome of a sports game or the price of a cryptocurrency). The contract should include the following features: \n\n1. Pool creation: Users can create a new prediction pool with a unique ID, specifying the event details, the possible outcomes, and the associated payout structures.\n\n2. Betting: Users can place bets on a prediction pool by specifying the outcome they predict and the amount of the stake. The contract should ensure that each user can only place one bet per pool per outcome.\n\n3. Pool resolution: After the event has occurred, the contract should automatically resolve the pool and distribute the payouts to the winning bettors. In case of a tie or an unforeseen event, the contract should have a fallback plan to handle the situation. \n\n4. Escrow mechanism: Implement an escrow mechanism to ensure that the payout is made only when the user's bet is resolved, preventing users from withdrawing the bet amount before the resolution.\n\n5. Withdrawal: Users can withdraw their initial bet amount after the pool resolution.\n\n6. Pool statistics: The contract should maintain a record of the pool's overall statistics, including the number of participants, total bet amount, and payout distribution. \n\nDesign this contract by writing the Solidity code, specifying the data structures, functions, and variables as required. Ensure the contract is secure, efficient, and scalable to handle a large number of users and prediction pools."
  }
]