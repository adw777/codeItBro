[
  {
    "original": "Write a program to reverse a string using proper recursion. [Topic: Basic Programming]",
    "rephrased": "Hey, I'm trying to write a function that reverses a string using recursion, but I'm having trouble figuring out how to implement it properly. I've got a basic idea of how it should work - the recursive function would call itself with the input string minus its first character until it reaches an empty string, at which point it would start appending characters in reverse order - but I'm stuck on making it actually work.\n\nI've tried implementing it in Python, but whenever I run it, it just seems to go into an infinite loop. I've also thought about using a helper function or some sort of accumulator variable, but nothing seems to be giving me the result I want. I've tested it with some simple strings like \"hello\" and \"abc\", but when I try to reverse something longer, like \"abcdefghijklmnopqrstuvwxyz\", it just freezes up.\n\nI'm thinking there must be some edge case I'm not considering - what about strings with non-ASCII characters or null bytes? Would those cause any issues in the recursion? And are there any particular languages you'd recommend for this kind of problem - I've been working mostly in Python, but if there's a better language to use here, I'm game.\n\n[Topic: Basic Programming]"
  },
  {
    "original": "Detect a cycle using Dynamic Programming approach given certain constraints. [Topic: Algorithms]",
    "rephrased": "I'm trying to implement a dynamic programming approach to detect cycles in a graph, but I'm having trouble figuring out how to do it efficiently given certain constraints. I've got a large dataset with potentially thousands of nodes and edges, and my current solution is running into performance issues.\n\nSo far, I've considered using Tarjan's algorithm or Floyd's cycle-finding algorithm, but they don't quite fit the bill because I need to adapt them for dynamic programming. I'm also stuck on how to handle the memoization process - should I use a hash table or a more complex data structure?\n\nI've tried some test cases with smaller graphs and it seems to work okay, but when I scale up to larger datasets, it starts to slow down dramatically. Has anyone else tackled this problem using dynamic programming? Are there any edge cases or potential issues I should watch out for, especially with regards to memory usage and performance?\n\nIdeally, I'd like to implement this in Python or C++, but the code is portable so if you have a better approach in another language, feel free to suggest it. Any advice would be super helpful - thanks!\n\n[Topic: Algorithms]"
  }
]